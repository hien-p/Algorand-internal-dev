/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createAppliaction(asset,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "setPrice(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "chooseAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "Buy(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuTWFya2V0cGxhY2UuY29udHJhY3QuTWFya2V0cGxhY2UuYXBwcm92YWxfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgbWV0aG9kICJjcmVhdGVBcHBsaWFjdGlvbihhc3NldCx1aW50NjQpdm9pZCIKICAgIG1ldGhvZCAic2V0UHJpY2UodWludDY0KXZvaWQiCiAgICBtZXRob2QgImNob29zZUFzc2V0KHBheSl2b2lkIgogICAgbWV0aG9kICJCdXkocGF5LHVpbnQ2NCl2b2lkIgogICAgbWV0aG9kICJkZWxldGVBcHBsaWNhdGlvbigpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlQXBwbGlhY3Rpb25fcm91dGVAMSBtYWluX3NldFByaWNlX3JvdXRlQDIgbWFpbl9jaG9vc2VBc3NldF9yb3V0ZUAzIG1haW5fQnV5X3JvdXRlQDQgbWFpbl9kZWxldGVBcHBsaWNhdGlvbl9yb3V0ZUA1CiAgICBlcnIgLy8gcmVqZWN0IHRyYW5zYWN0aW9uCgptYWluX2NyZWF0ZUFwcGxpYWN0aW9uX3JvdXRlQDE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MTAtMTEKICAgIC8vICMgY3JlYXRlIGFwcGxpY2F0aW9uIGFiaSBtZXRob2QsIHdlIHNldCBub29wIHN0YW5kIGZvciBubyBvcGVyYXRpb25zLAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIl0sIGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gaXMgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MTAtMTEKICAgIC8vICMgY3JlYXRlIGFwcGxpY2F0aW9uIGFiaSBtZXRob2QsIHdlIHNldCBub29wIHN0YW5kIGZvciBubyBvcGVyYXRpb25zLAogICAgLy8gQGFyYzQuYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIl0sIGNyZWF0ZT0icmVxdWlyZSIpCiAgICBjYWxsc3ViIGNyZWF0ZUFwcGxpYWN0aW9uCiAgICBpbnQgMQogICAgcmV0dXJuCgptYWluX3NldFByaWNlX3JvdXRlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGlzIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIE1hcmtldHBsYWNlKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MTYKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBzZXRQcmljZQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9jaG9vc2VBc3NldF9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxLTIyCiAgICAvLyAjIGNob29zZSB0aGUgYXNzZXQgd2lsbCBiZSBzb2xkCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MjEtMjIKICAgIC8vICMgY2hvb3NlIHRoZSBhc3NldCB3aWxsIGJlIHNvbGQKICAgIC8vIEBhcmM0LmFiaW1ldGhvZAogICAgY2FsbHN1YiBjaG9vc2VBc3NldAogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9CdXlfcm91dGVANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTozOC0zOQogICAgLy8gIyBidXkgdGhlIGFzc2V0CiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBpcyBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludCAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnQgcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MzgtMzkKICAgIC8vICMgYnV5IHRoZSBhc3NldAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICBjYWxsc3ViIEJ1eQogICAgaW50IDEKICAgIHJldHVybgoKbWFpbl9kZWxldGVBcHBsaWNhdGlvbl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjUzLTU0CiAgICAvLyAjIHdlIHdhbnQgdG8gd2l0aGRyYXcgYWxsIHRoZSBwcm9maXRzLCB3aGVuIHBlb3BsZSBidXkgYXNzZXRzIHRoZXkgc2VudCBhbGdvcyB0byB0aGUgc21hcnQgY29udHJhY3QgYWNjb3VudC4gVGhlIGNyZWF0b3IgbmVlZCB3aXRoZHJhdyB0aGUgbW9uZXlzIGJlZm9yZSBkZWxldGUgc21hcnQgY29udHJhY3QKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGludCBEZWxldGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgRGVsZXRlQXBwbGljYXRpb24KICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gaXMgbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlbGV0ZUFwcGxpY2F0aW9uCiAgICBpbnQgMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLk1hcmtldHBsYWNlLmNvbnRyYWN0Lk1hcmtldHBsYWNlLmNyZWF0ZUFwcGxpYWN0aW9uKGFzc2V0SUQ6IHVpbnQ2NCwgdW5pdGFyeXByaWNlOiB1aW50NjQpIC0+IHZvaWQ6CmNyZWF0ZUFwcGxpYWN0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEwLTEyCiAgICAvLyAjIGNyZWF0ZSBhcHBsaWNhdGlvbiBhYmkgbWV0aG9kLCB3ZSBzZXQgbm9vcCBzdGFuZCBmb3Igbm8gb3BlcmF0aW9ucywKICAgIC8vIEBhcmM0LmFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCJdLCBjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGNyZWF0ZUFwcGxpYWN0aW9uKHNlbGYsIGFzc2V0SUQ6IEFzc2V0LCB1bml0YXJ5cHJpY2U6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjEzCiAgICAvLyBzZWxmLmFzc2V0SUQgPSBhc3NldElELmlkCiAgICBieXRlICJhc3NldElEIgogICAgZnJhbWVfZGlnIC0yCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjE0CiAgICAvLyBzZWxmLnVuaXRhcnlwcmljZSA9IHVuaXRhcnlwcmljZQogICAgYnl0ZSAidW5pdGFyeXByaWNlIgogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLk1hcmtldHBsYWNlLmNvbnRyYWN0Lk1hcmtldHBsYWNlLnNldFByaWNlKHVuaXRhcnlwcmljZTogdWludDY0KSAtPiB2b2lkOgpzZXRQcmljZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weToxNi0xNwogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgc2V0UHJpY2Uoc2VsZiwgdW5pdGFyeXByaWNlOiBVSW50NjQpIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weToxOAogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MTkKICAgIC8vIHNlbGYudW5pdGFyeXByaWNlID0gdW5pdGFyeXByaWNlCiAgICBieXRlICJ1bml0YXJ5cHJpY2UiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuTWFya2V0cGxhY2UuY29udHJhY3QuTWFya2V0cGxhY2UuY2hvb3NlQXNzZXQobWJyUGF5OiB1aW50NjQpIC0+IHZvaWQ6CmNob29zZUFzc2V0OgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjIxLTIzCiAgICAvLyAjIGNob29zZSB0aGUgYXNzZXQgd2lsbCBiZSBzb2xkCiAgICAvLyBAYXJjNC5hYmltZXRob2QKICAgIC8vIGRlZiBjaG9vc2VBc3NldChzZWxmLCBtYnJQYXk6IGd0eG4uUGF5bWVudFRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MjQKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IEdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI2CiAgICAvLyBhc3NlcnQgbm90IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuaXNfb3B0ZWRfaW4oQXNzZXQoc2VsZi5hc3NldElEKSkKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBpbnQgMAogICAgYnl0ZSAiYXNzZXRJRCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgYXNzZXRJRCBleGlzdHMKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weToyNwogICAgLy8gYXNzZXJ0IG1iclBheS5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjI5LTMwCiAgICAvLyAjIHRoZSBhbW91bnQgb2YgdGhlIG1icnBheSBpcyBlcXVhbCB0byB0aGUgbWluaW11bSBiYWxhbmNlIGZyb20KICAgIC8vIGFzc2VydCBtYnJQYXkuYW1vdW50ID09ICBHbG9iYWwubWluX2JhbGFuY2UgKyBHbG9iYWwuYXNzZXRfb3B0X2luX21pbl9iYWxhbmNlCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgZ2xvYmFsIE1pbkJhbGFuY2UKICAgIGdsb2JhbCBBc3NldE9wdEluTWluQmFsYW5jZQogICAgKwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMzLTM1CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoeGZlcl9hc3NldD1zZWxmLmFzc2V0SUQsCiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gYXNzZXRfYW1vdW50PTApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MzMKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2Zlcih4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRJRCwKICAgIGludCAwCiAgICBieXRlICJhc3NldElEIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBhc3NldElEIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjM0CiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTozNQogICAgLy8gYXNzZXRfYW1vdW50PTApLnN1Ym1pdCgpCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMzCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoeGZlcl9hc3NldD1zZWxmLmFzc2V0SUQsCiAgICBpbnQgYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjMzLTM1CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoeGZlcl9hc3NldD1zZWxmLmFzc2V0SUQsCiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLAogICAgLy8gYXNzZXRfYW1vdW50PTApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLk1hcmtldHBsYWNlLmNvbnRyYWN0Lk1hcmtldHBsYWNlLkJ1eShidXllclR4YjogdWludDY0LCBxdWFudGl0eTogdWludDY0KSAtPiB2b2lkOgpCdXk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6MzgtNDAKICAgIC8vICMgYnV5IHRoZSBhc3NldAogICAgLy8gQGFyYzQuYWJpbWV0aG9kCiAgICAvLyBkZWYgQnV5KHNlbGYsIGJ1eWVyVHhiOiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbiwgcXVhbnRpdHk6IFVJbnQ2NCkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjQxCiAgICAvLyBhc3NlcnQgc2VsZi51bml0YXJ5cHJpY2UgIT0gVUludDY0KDApCiAgICBpbnQgMAogICAgYnl0ZSAidW5pdGFyeXByaWNlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayB1bml0YXJ5cHJpY2UgZXhpc3RzCiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo0MgogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gYnV5ZXJUeGIuc2VuZGVyCiAgICB0eG4gU2VuZGVyCiAgICBmcmFtZV9kaWcgLTIKICAgIGd0eG5zIFNlbmRlcgogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjQzCiAgICAvLyBhc3NlcnQgYnV5ZXJUeGIucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo0NAogICAgLy8gYXNzZXJ0IGJ1eWVyVHhiLmFtb3VudCA9PSBzZWxmLnVuaXRhcnlwcmljZSAqIHF1YW50aXR5ICMgdGhlIGFtb3VudCBvZiB0aGUgYnV5ZXJUeGIgaXMgZXF1YWwgdG8gdGhlIHByaWNlIG9mIHRoZSBhc3NldAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBbW91bnQKICAgIGludCAwCiAgICBieXRlICJ1bml0YXJ5cHJpY2UiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHVuaXRhcnlwcmljZSBleGlzdHMKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjQ2LTUwCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLmFzc2V0SUQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9IFR4bi5zZW5kZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PXF1YW50aXR5CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NDcKICAgIC8vIHhmZXJfYXNzZXQ9c2VsZi5hc3NldElELAogICAgaW50IDAKICAgIGJ5dGUgImFzc2V0SUQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIGFzc2V0SUQgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NDgKICAgIC8vIGFzc2V0X3JlY2VpdmVyPSBUeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NDYKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludCBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50IDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NDYtNTAKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRJRCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj0gVHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9cXVhbnRpdHkKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMuTWFya2V0cGxhY2UuY29udHJhY3QuTWFya2V0cGxhY2UuZGVsZXRlQXBwbGljYXRpb24oKSAtPiB2b2lkOgpkZWxldGVBcHBsaWNhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1My01NQogICAgLy8gIyB3ZSB3YW50IHRvIHdpdGhkcmF3IGFsbCB0aGUgcHJvZml0cywgd2hlbiBwZW9wbGUgYnV5IGFzc2V0cyB0aGV5IHNlbnQgYWxnb3MgdG8gdGhlIHNtYXJ0IGNvbnRyYWN0IGFjY291bnQuIFRoZSBjcmVhdG9yIG5lZWQgd2l0aGRyYXcgdGhlIG1vbmV5cyBiZWZvcmUgZGVsZXRlIHNtYXJ0IGNvbnRyYWN0CiAgICAvLyBAYXJjNC5hYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIkRlbGV0ZUFwcGxpY2F0aW9uIl0pCiAgICAvLyBkZWYgZGVsZXRlQXBwbGljYXRpb24oc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjU2CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1OC02MwogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9c2VsZi5hc3NldElELAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAsCiAgICAvLyAgICAgYXNzZXRfY2xvc2VfdG89R2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjU5CiAgICAvLyB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRJRCwKICAgIGludCAwCiAgICBieXRlICJhc3NldElEIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBhc3NldElEIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjYwCiAgICAvLyBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NjIKICAgIC8vIGFzc2V0X2Nsb3NlX3RvPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIGR1cAogICAgaXR4bl9maWVsZCBBc3NldENsb3NlVG8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo2MQogICAgLy8gYXNzZXRfYW1vdW50PTAsCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjU4CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnQgYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjU4LTYzCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLmFzc2V0SUQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MCwKICAgIC8vICAgICBhc3NldF9jbG9zZV90bz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY1LTY5CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9R2xvYmFsLmNyZWF0b3JfYWRkcmVzcywKICAgIC8vICAgICBhbW91bnQ9MCwKICAgIC8vICAgICBjbG9zZV9yZW1haW5kZXJfdG89R2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY2CiAgICAvLyByZWNlaXZlcj1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzLAogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NjgKICAgIC8vIGNsb3NlX3JlbWFpbmRlcl90bz1HbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICBkdXAKICAgIGl0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY3CiAgICAvLyBhbW91bnQ9MCwKICAgIGludCAwCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL01hcmtldHBsYWNlL2NvbnRyYWN0LnB5OjY1CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnQgcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnQgMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo2NS02OQogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MsCiAgICAvLyAgICAgYW1vdW50PTAsCiAgICAvLyAgICAgY2xvc2VfcmVtYWluZGVyX3RvPUdsb2JhbC5jcmVhdG9yX2FkZHJlc3MKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvTWFya2V0cGxhY2UvY29udHJhY3QucHk6NzEKICAgIC8vIHNlbGYuZGVsZXRlQXBwbGljYXRpb24oKQogICAgY2FsbHN1YiBkZWxldGVBcHBsaWNhdGlvbgogICAgcmV0c3ViCg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuTWFya2V0cGxhY2UuY29udHJhY3QuTWFya2V0cGxhY2UuY2xlYXJfc3RhdGVfcHJvZ3JhbToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9NYXJrZXRwbGFjZS9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBNYXJrZXRwbGFjZShBUkM0Q29udHJhY3QpOgogICAgaW50IDEKICAgIHJldHVybgo="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "assetID": {
          "type": "uint64",
          "key": "assetID"
        },
        "unitaryprice": {
          "type": "uint64",
          "key": "unitaryprice"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "Marketplace",
    "methods": [
      {
        "name": "createAppliaction",
        "args": [
          {
            "type": "asset",
            "name": "assetID"
          },
          {
            "type": "uint64",
            "name": "unitaryprice"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrice",
        "args": [
          {
            "type": "uint64",
            "name": "unitaryprice"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "chooseAsset",
        "args": [
          {
            "type": "pay",
            "name": "mbrPay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "Buy",
        "args": [
          {
            "type": "pay",
            "name": "buyerTxb"
          },
          {
            "type": "uint64",
            "name": "quantity"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the Marketplace smart contract.
 */
export type Marketplace = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createAppliaction(asset,uint64)void' | 'createAppliaction', {
      argsObj: {
        assetId: number | bigint
        unitaryprice: bigint | number
      }
      argsTuple: [assetId: number | bigint, unitaryprice: bigint | number]
      returns: void
    }>
    & Record<'setPrice(uint64)void' | 'setPrice', {
      argsObj: {
        unitaryprice: bigint | number
      }
      argsTuple: [unitaryprice: bigint | number]
      returns: void
    }>
    & Record<'chooseAsset(pay)void' | 'chooseAsset', {
      argsObj: {
        mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrPay: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'Buy(pay,uint64)void' | 'Buy', {
      argsObj: {
        buyerTxb: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [buyerTxb: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      assetId?: IntegerState
      unitaryprice?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type MarketplaceSig = keyof Marketplace['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends MarketplaceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Marketplace smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends MarketplaceSig> = Marketplace['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Marketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MarketplaceSig> = Marketplace['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type MarketplaceCreateCalls = (typeof MarketplaceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type MarketplaceCreateCallParams =
  | (TypedCallParams<'createAppliaction(asset,uint64)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type MarketplaceDeleteCalls = (typeof MarketplaceCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type MarketplaceDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type MarketplaceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: MarketplaceCreateCalls) => MarketplaceCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: MarketplaceDeleteCalls) => MarketplaceDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class MarketplaceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Marketplace smart contract using the createAppliaction(asset,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createAppliaction(args: MethodArgs<'createAppliaction(asset,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createAppliaction(asset,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.assetId, args.unitaryprice],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Marketplace smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setPrice(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setPrice(args: MethodArgs<'setPrice(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setPrice(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.unitaryprice],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the chooseAsset(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static chooseAsset(args: MethodArgs<'chooseAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'chooseAsset(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrPay],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the Buy(pay,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buy(args: MethodArgs<'Buy(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'Buy(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.buyerTxb, args.quantity],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Marketplace smart contract
 */
export class MarketplaceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `MarketplaceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Marketplace['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Marketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: MarketplaceDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(MarketplaceCallFactory.create)
    const deleteArgs = params.deleteCall?.(MarketplaceCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Marketplace smart contract using the createAppliaction(asset,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createAppliaction(args: MethodArgs<'createAppliaction(asset,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createAppliaction(asset,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(MarketplaceCallFactory.create.createAppliaction(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Marketplace smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(MarketplaceCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Marketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setPrice(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setPrice(args: MethodArgs<'setPrice(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MarketplaceCallFactory.setPrice(args, params))
  }

  /**
   * Calls the chooseAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public chooseAsset(args: MethodArgs<'chooseAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MarketplaceCallFactory.chooseAsset(args, params))
  }

  /**
   * Calls the Buy(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buy(args: MethodArgs<'Buy(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(MarketplaceCallFactory.buy(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Marketplace['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get assetId() {
        return MarketplaceClient.getIntegerState(state, 'assetID')
      },
      get unitaryprice() {
        return MarketplaceClient.getIntegerState(state, 'unitaryprice')
      },
    }
  }

  public compose(): MarketplaceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setPrice(args: MethodArgs<'setPrice(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      chooseAsset(args: MethodArgs<'chooseAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.chooseAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buy(args: MethodArgs<'Buy(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as MarketplaceComposer
  }
}
export type MarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setPrice(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setPrice(args: MethodArgs<'setPrice(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MarketplaceComposer<[...TReturns, MethodReturn<'setPrice(uint64)void'>]>

  /**
   * Calls the chooseAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  chooseAsset(args: MethodArgs<'chooseAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MarketplaceComposer<[...TReturns, MethodReturn<'chooseAsset(pay)void'>]>

  /**
   * Calls the Buy(pay,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buy(args: MethodArgs<'Buy(pay,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): MarketplaceComposer<[...TReturns, MethodReturn<'Buy(pay,uint64)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Marketplace smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): MarketplaceComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Marketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): MarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): MarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<MarketplaceComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<MarketplaceComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type MarketplaceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type MarketplaceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
